import{l as o,i as f,j as w,I as p,h as n,aH as y,w as _,e as V,n as v}from"./index.46140dee.js";import{s as C}from"./Container.33099dfd.js";import{r as b}from"./GroupContainer.223284ca.js";import{f as H}from"./LayerView2D.5d8afc95.js";import{i as g}from"./GraphicContainer.a12b3704.js";import{a as d}from"./BaseGraphicContainer.d66a84fa.js";import{u as T}from"./LayerView.4e67e454.js";import"./EffectView.8a7c9049.js";import"./WGLContainer.e140d8ed.js";import"./brushes.5f721f9c.js";import"./pixelUtils.401aa928.js";import"./definitions.8fc39ccc.js";import"./Utils.78708976.js";import"./number.08b65821.js";import"./enums.05a6ea95.js";import"./ProgramTemplate.f659b6eb.js";import"./MaterialKey.ac16d063.js";import"./alignmentUtils.63b4d661.js";import"./utils.eef06193.js";import"./StyleDefinition.5774ff26.js";import"./GeometryUtils.8166011b.js";import"./CIMSymbolHelper.6f4abb5f.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.5e637dae.js";import"./FeatureContainer.e864a5cb.js";import"./visualVariablesUtils.41857ea7.js";import"./visualVariablesUtils.2743b61a.js";import"./TileContainer.af5b7667.js";import"./Matcher.bfef90fe.js";import"./tileUtils.ad56c843.js";import"./TileClipper.f1cc810c.js";import"./Geometry.b68345ae.js";import"./cimAnalyzer.2dca29a9.js";import"./ExpandedCIM.a72b13cb.js";import"./schemaUtils.97a5677c.js";import"./createSymbolSchema.fdcc1e72.js";import"./MD5.97b39efc.js";import"./util.520bef67.js";import"./ComputedAttributeStorage.e6be58ac.js";import"./centroid.d4b2ad85.js";import"./GraphicsView.a154c8cc.js";const m="sublayers",l="layerView",I=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends H(T){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate)}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):w.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):I}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new g(this.view.featuresTilingScheme);h.fadeTransitionEnabled=!0;const r=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.handles.add([p(()=>s.visible,a=>r.container.visible=a,n),p(()=>r.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new d({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.handles.add([s.on("graphic-update",a.graphicUpdateHandler),p(()=>s.visible,u=>a.container.visible=u,n),p(()=>a.updating,()=>this.notifyChange("updating"),n)],l),h.addChild(a.container),this.container.addChild(h),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const ui=c;export{ui as default};
