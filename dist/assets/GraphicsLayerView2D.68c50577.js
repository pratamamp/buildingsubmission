import{i as s,j as p,e as r,g as a,n as o}from"./index.46140dee.js";import{f as g}from"./LayerView2D.5d8afc95.js";import{i as m}from"./GraphicContainer.a12b3704.js";import{a as l}from"./BaseGraphicContainer.d66a84fa.js";import{u as c}from"./LayerView.4e67e454.js";import"./Container.33099dfd.js";import"./EffectView.8a7c9049.js";import"./Utils.78708976.js";import"./number.08b65821.js";import"./enums.05a6ea95.js";import"./CIMSymbolHelper.6f4abb5f.js";import"./BidiEngine.ec67919b.js";import"./alignmentUtils.63b4d661.js";import"./definitions.8fc39ccc.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.5e637dae.js";import"./FeatureContainer.e864a5cb.js";import"./visualVariablesUtils.41857ea7.js";import"./visualVariablesUtils.2743b61a.js";import"./TileContainer.af5b7667.js";import"./WGLContainer.e140d8ed.js";import"./brushes.5f721f9c.js";import"./pixelUtils.401aa928.js";import"./ProgramTemplate.f659b6eb.js";import"./MaterialKey.ac16d063.js";import"./utils.eef06193.js";import"./StyleDefinition.5774ff26.js";import"./GeometryUtils.8166011b.js";import"./Matcher.bfef90fe.js";import"./tileUtils.ad56c843.js";import"./TileClipper.f1cc810c.js";import"./Geometry.b68345ae.js";import"./cimAnalyzer.2dca29a9.js";import"./ExpandedCIM.a72b13cb.js";import"./schemaUtils.97a5677c.js";import"./createSymbolSchema.fdcc1e72.js";import"./MD5.97b39efc.js";import"./util.520bef67.js";import"./ComputedAttributeStorage.e6be58ac.js";import"./centroid.d4b2ad85.js";import"./GraphicsView.a154c8cc.js";const n={remove(){},pause(){},resume(){}};let h=class extends g(c){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new l({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new m(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof s?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):p.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray()),t=t==null?void 0:t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):n}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};r([a()],h.prototype,"graphicsView",void 0),h=r([o("esri.views.2d.layers.GraphicsLayerView2D")],h);const ti=h;export{ti as default};
