import{pF as y,pG as w,pH as I,I as V,iz as T,g1 as v,H as n,ex as f,ai as q,e as o,g as m,n as Q}from"./index.deeeec5f.js";import{r as S,o as d,n as _}from"./imageUtils.a3c857b0.js";import{f as U}from"./LayerView2D.8d224f69.js";import{u as b}from"./LayerView.01f05af6.js";import{i as C}from"./RefreshableLayerView.92abe7be.js";import{i as k}from"./TileLayerView.886db18c.js";import"./BitmapTileContainer.f8a3df57.js";import"./Bitmap.b3f0942b.js";import"./brushes.cdb6e6bc.js";import"./pixelUtils.c2c7174c.js";import"./definitions.8fc39ccc.js";import"./Utils.6b087bd2.js";import"./number.08b65821.js";import"./enums.05a6ea95.js";import"./ProgramTemplate.44aa5358.js";import"./MaterialKey.27dab64d.js";import"./alignmentUtils.63b4d661.js";import"./utils.fbbc4a0f.js";import"./StyleDefinition.5774ff26.js";import"./GeometryUtils.8166011b.js";import"./TileContainer.6a572bcb.js";import"./WGLContainer.f52f7b24.js";import"./Container.de644bec.js";import"./EffectView.b3326d65.js";const z=[0,0];let r=class extends k(C(S(U(b)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new w({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new I({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(V(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return T((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return v(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)))}isUpdating(){var e,t;return(t=(e=this._fetchQueue)==null?void 0:e.updating)!=null?t:!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(z,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:a,resamplingLevel:u=0}=t;if(!i)try{return await this._fetchImage(e,a)}catch(s){if(!n(s)&&!this.resampling)return d(this._tileInfoView.tileInfo.size);if(u<3){const p=this._tileInfoView.getTileParentId(e.id);if(p){const c=new f(p),g=await this.fetchTile(c,{...t,resamplingLevel:u+1});return _(this._tileInfoView,g,c,e)}}throw s}const h=new f(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,h,{signal:a}),h.level!==e.level&&!this.resampling)return d(this._tileInfoView.tileInfo.size);l=await this._fetchImage(h,a)}catch(s){if(n(s))throw s;l=await this._fetchImage(e,a)}return this.resampling?_(this._tileInfoView,l,h,e):l}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||q.getLogger(this.declaredClass).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}};o([m()],r.prototype,"_fetchQueue",void 0),o([m()],r.prototype,"resampling",null),r=o([Q("esri.views.2d.layers.TileLayerView2D")],r);const ie=r;export{ie as default};
