import{pX as D,dH as N,aY as C,b5 as S,dL as R,b9 as Y,k as A,pY as B,cT as O,pZ as _,p_ as j,p$ as k,q0 as G,q1 as Z,q2 as H,q3 as L,q4 as U,q5 as X,q6 as J,q7 as K}from"./index.ffdd6b96.js";let I=null;function Q(n,a,l){return n.x<0?n.x+=a:n.x>l&&(n.x-=a),n}function W(n,a,l,t){const i=D(l)?N(l):null,r=i?Math.round((i.valid[1]-i.valid[0])/a.scale[0]):null;return n.map(s=>{const e=new C(S(s.geometry));return R(a,e,e,e.hasZ,e.hasM),s.geometry=i?Q(e,r,t[0]):e,s})}function aa(n,a=18,l,t,i,r){const s=new Float64Array(i*r);a=Math.round(O(a));let e=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY,u=0,m=0,d=0,f=0;const c=_(t,l);for(const{geometry:v,attributes:z}of n){const{x:y,y:w}=v,E=Math.max(0,y-a),M=Math.max(0,w-a),$=Math.min(r,w+a),g=Math.min(i,y+a),P=+c(z);for(let x=M;x<$;x++)for(let T=E;T<g;T++){const F=x*i+T,b=j(T-y,x-w,a),q=s[F];u=s[F]+=b*P;const V=u-q;m+=V,d+=V*V,u<e&&(e=u),u>o&&(o=u),f++}}if(!f)return{mean:0,stddev:0,min:0,max:0,mid:0,count:0};const p=(o-e)/2;return{mean:m/f,stdDev:Math.sqrt((d-m*m/f)/f),min:e,max:o,mid:p,count:f}}async function h(n,a){if(!a)return[];const l=n.field,t=n.valueExpression,i=n.normalizationType,r=n.normalizationField,s=n.normalizationTotal,e=[],o=n.viewInfoParams;let u=null,m=null;if(t){if(!I){const{arcadeUtils:c}=await Y();I=c}u=I.createFunction(t),m=o&&I.getViewInfo({viewingMode:o.viewingMode,scale:o.scale,spatialReference:new A(o.spatialReference)})}const d=n.fieldInfos,f=!(a[0]&&"declaredClass"in a[0]&&a[0].declaredClass==="esri.Graphic")&&d?{fields:d}:null;return a.forEach(c=>{const p=c.attributes;let v;if(t){const z=f?{...c,layer:f}:c,y=I.createExecContext(z,m);v=I.executeFunction(u,y)}else p&&(v=p[l]);if(i&&isFinite(v)){const z=p&&parseFloat(p[r]);v=B(v,i,z,s)}e.push(v)}),e}async function ea(n){const{attribute:a,features:l}=n,{normalizationType:t,normalizationField:i,minValue:r,maxValue:s,fieldType:e}=a,o=await h({field:a.field,valueExpression:a.valueExpression,normalizationType:t,normalizationField:i,normalizationTotal:a.normalizationTotal,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},l),u=k({normalizationType:t,normalizationField:i,minValue:r,maxValue:s}),m={value:.5,fieldType:e},d=e==="esriFieldTypeString"?G({values:o,supportsNullCount:u,percentileParams:m}):Z({values:o,minValue:r,maxValue:s,useSampleStdDev:!t,supportsNullCount:u,percentileParams:m});return H(d,e==="esriFieldTypeDate")}async function ia(n){const{attribute:a,features:l}=n,t=await h({field:a.field,valueExpression:a.valueExpression,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},l),i=L(t);return U(i,a.domain,a.returnAllCodedValues)}async function ta(n){const{attribute:a,features:l}=n,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:s,classificationMethod:e}=a,o=await h({field:t,valueExpression:a.valueExpression,normalizationType:i,normalizationField:r,normalizationTotal:s,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},l),u=X(o,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:s,classificationMethod:e,standardDeviationInterval:a.standardDeviationInterval,numClasses:a.numClasses,minValue:a.minValue,maxValue:a.maxValue});return J(u,e)}async function oa(n){const{attribute:a,features:l}=n,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:s,classificationMethod:e}=a,o=await h({field:t,valueExpression:a.valueExpression,normalizationType:i,normalizationField:r,normalizationTotal:s,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},l);return K(o,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:s,classificationMethod:e,standardDeviationInterval:a.standardDeviationInterval,numBins:a.numBins,minValue:a.minValue,maxValue:a.maxValue})}async function sa(n){const{attribute:a,features:l}=n,{field:t,radius:i,fieldOffset:r,transform:s,spatialReference:e,size:o}=a,u=W(l,s,e,o),{count:m,min:d,max:f,mean:c,stdDev:p}=aa(u,i,r,t,o[0],o[1]);return{count:m,min:d,max:f,avg:c,stddev:p}}export{ta as classBreaks,sa as heatmapStatistics,oa as histogram,ea as summaryStatistics,ia as uniqueValues};
