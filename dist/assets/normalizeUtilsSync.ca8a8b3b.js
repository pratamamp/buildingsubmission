import{bd as J,w as N,dH as V,es as A,et as S,e5 as R,dS as X,e1 as H,dJ as Y,dN as k,dY as j,eu as q,ev as z,ew as f}from"./index.deeeec5f.js";function K(e){return M(e,!0)}function Q(e){return M(e,!1)}function M(e,s){if(N(e))return null;const n=e.spatialReference,i=V(n),t="toJSON"in e?e.toJSON():e;if(!i)return t;const h=A(n)?102100:4326,u=S[h].maxX,m=S[h].minX;if(R(t))return T(t,u,m);if(X(t))return t.points=t.points.map(o=>T(o,u,m)),t;if(H(t))return B(t,i);if(Y(t)||k(t)){const o=j(E,t),r={xmin:o[0],ymin:o[1],xmax:o[2],ymax:o[3]},x=f(r.xmin,m)*(2*u),l=x===0?t:q(t,x);return r.xmin+=x,r.xmax+=x,r.xmax>u?L(l,u,s):r.xmin<m?L(l,m,s):l}return t}function B(e,s){if(!s)return e;const n=D(e,s).map(i=>i.extent);return n.length<2?n[0]||e:n.length>2?(e.xmin=s.valid[0],e.xmax=s.valid[1],e):{rings:n.map(i=>[[i.xmin,i.ymin],[i.xmin,i.ymax],[i.xmax,i.ymax],[i.xmax,i.ymin],[i.xmin,i.ymin]])}}function T(e,s,n){if(Array.isArray(e)){const i=e[0];if(i>s){const t=f(i,s);e[0]=i+t*(-2*s)}else if(i<n){const t=f(i,n);e[0]=i+t*(-2*n)}}else{const i=e.x;if(i>s){const t=f(i,s);e.x+=t*(-2*s)}else if(i<n){const t=f(i,n);e.x+=t*(-2*n)}}return e}function D(e,s){const n=[],{ymin:i,ymax:t,xmin:h,xmax:u}=e,m=e.xmax-e.xmin,[o,r]=s.valid,{x,frameId:l}=w(e.xmin,s),{x:c,frameId:p}=w(e.xmax,s),b=x===c&&m>0;if(m>2*r){const g={xmin:h<u?x:c,ymin:i,xmax:r,ymax:t},O={xmin:o,ymin:i,xmax:h<u?c:x,ymax:t},P={xmin:0,ymin:i,xmax:r,ymax:t},C={xmin:o,ymin:i,xmax:0,ymax:t},_=[],d=[];v(g,P)&&_.push(l),v(g,C)&&d.push(l),v(O,P)&&_.push(p),v(O,C)&&d.push(p);for(let y=l+1;y<p;y++)_.push(y),d.push(y);n.push(new a(g,[l]),new a(O,[p]),new a(P,_),new a(C,d))}else x>c||b?n.push(new a({xmin:x,ymin:i,xmax:r,ymax:t},[l]),new a({xmin:o,ymin:i,xmax:c,ymax:t},[p])):n.push(new a({xmin:x,ymin:i,xmax:c,ymax:t},[l]));return n}function w(e,s){const[n,i]=s.valid,t=2*i;let h,u=0;return e>i?(h=Math.ceil(Math.abs(e-i)/t),e-=h*t,u=h):e<n&&(h=Math.ceil(Math.abs(e-n)/t),e+=h*t,u=-h),{x:e,frameId:u}}function v(e,s){const{xmin:n,ymin:i,xmax:t,ymax:h}=s;return I(e,n,i)&&I(e,n,h)&&I(e,t,h)&&I(e,t,i)}function I(e,s,n){return s>=e.xmin&&s<=e.xmax&&n>=e.ymin&&n<=e.ymax}function L(e,s,n=!0){const i=!k(e);if(i&&z(e),n)return new F().cut(e,s);const t=i?e.rings:e.paths,h=i?4:2,u=t.length,m=-2*s;for(let o=0;o<u;o++){const r=t[o];if(r&&r.length>=h){const x=[];for(const l of r)x.push([l[0]+m,l[1]]);t.push(x)}}return i?e.rings=t:e.paths=t,e}class a{constructor(s,n){this.extent=s,this.frameIds=n}}const E=J();class F{constructor(){this.linesIn=[],this.linesOut=[]}cut(s,n){let i;if(this.xCut=n,s.rings)this.closed=!0,i=s.rings,this.minPts=4;else{if(!s.paths)return null;this.closed=!1,i=s.paths,this.minPts=2}for(const h of i){if(!h||h.length<this.minPts)continue;let u=!0;for(const m of h)u?(this.moveTo(m),u=!1):this.lineTo(m);this.closed&&this.close()}this._pushLineIn(),this._pushLineOut(),i=[];for(const h of this.linesIn)h&&h.length>=this.minPts&&i.push(h);const t=-2*this.xCut;for(const h of this.linesOut)if(h&&h.length>=this.minPts){for(const u of h)u[0]+=t;i.push(h)}return this.closed?s.rings=i:s.paths=i,s}moveTo(s){this._pushLineIn(),this._pushLineOut(),this._prevSide=this._side(s[0]),this._moveTo(s[0],s[1],this._prevSide),this._prevPt=s,this._firstPt=s}lineTo(s){const n=this._side(s[0]);if(n*this._prevSide==-1){const i=this._intersect(this._prevPt,s);this._lineTo(this.xCut,i,0),this._prevSide=0,this._lineTo(s[0],s[1],n)}else this._lineTo(s[0],s[1],n);this._prevSide=n,this._prevPt=s}close(){const s=this._firstPt,n=this._prevPt;s[0]===n[0]&&s[1]===n[1]||this.lineTo(s),this._checkClosingPt(this.lineIn),this._checkClosingPt(this.lineOut)}_moveTo(s,n,i){this.closed?(this.lineIn.push([i<=0?s:this.xCut,n]),this.lineOut.push([i>=0?s:this.xCut,n])):(i<=0&&this.lineIn.push([s,n]),i>=0&&this.lineOut.push([s,n]))}_lineTo(s,n,i){this.closed?(this._addPolyVertex(this.lineIn,i<=0?s:this.xCut,n),this._addPolyVertex(this.lineOut,i>=0?s:this.xCut,n)):i<0?(this._prevSide===0&&this._pushLineOut(),this.lineIn.push([s,n])):i>0?(this._prevSide===0&&this._pushLineIn(),this.lineOut.push([s,n])):this._prevSide<0?(this.lineIn.push([s,n]),this.lineOut.push([s,n])):this._prevSide>0&&(this.lineOut.push([s,n]),this.lineIn.push([s,n]))}_addPolyVertex(s,n,i){const t=s.length;t>1&&s[t-1][0]===n&&s[t-2][0]===n?s[t-1][1]=i:s.push([n,i])}_checkClosingPt(s){const n=s.length;n>3&&s[0][0]===this.xCut&&s[n-2][0]===this.xCut&&s[1][0]===this.xCut&&(s[0][1]=s[n-2][1],s.pop())}_side(s){return s<this.xCut?-1:s>this.xCut?1:0}_intersect(s,n){const i=(this.xCut-s[0])/(n[0]-s[0]);return s[1]+i*(n[1]-s[1])}_pushLineIn(){this.lineIn&&this.lineIn.length>=this.minPts&&this.linesIn.push(this.lineIn),this.lineIn=[]}_pushLineOut(){this.lineOut&&this.lineOut.length>=this.minPts&&this.linesOut.push(this.lineOut),this.lineOut=[]}}export{Q as f,K as p};
