import{qJ as p,qK as g,jA as y,qL as w,qM as q,iB as f,w as h,_ as I}from"./index.deeeec5f.js";class _{constructor(){this.code=null,this.description=null}}class b{constructor(t){this.error=new _,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new b(e)}class v{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function V(e){return new v(e)}const a=new Set;function A(e,t,n,m=!1,u){a.clear();for(const r in n){const i=e.get(r);if(!i)continue;const l=n[r],s=P(i,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:i,originalValue:l,sanitizedValue:s}}),a.add(i.name),i&&(m||i.editable)){const c=p(i,s);if(c)return d(g(c,i,s));t[i.name]=s}}for(const r of e.requiredFields)if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function P(e,t){let n=t;return typeof t=="string"&&y(e)?n=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(n=String(t)),q(n)}let o;function B(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function j(){return h(o)&&(o=await I(()=>import("./geometryEngineJSON.d55bf26b.js"),["assets/geometryEngineJSON.d55bf26b.js","assets/geometryEngineBase.cf4f989f.js","assets/geometryEngineJSON.d2220fef.js","assets/index.deeeec5f.js","assets/index.2c2ebad2.css"])),o}async function F(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await j()}export{d as a,V as f,B as g,A as m,F as w};
